#%RAML 1.0
---
title: Smart Trade
version: v0.5
protocols: [HTTP]
mediaType: application/json
baseUri: http://smart-trader/{version}/
securedBy: [passthrough]
securitySchemes:
  passthrough: !include securitySchemas/passthrough_security_scheme.raml
types: 
  ReportFilter: !include types/report_filter.raml
  Order: !include types/order.raml
  ExchangeCredentials: !include types/exchange_credentials.raml
  OrderStatus: !include types/orders_status.raml
  SentOrder: !include types/sent_order.raml
  AccountStatus: !include types/account_status.raml
  AccountBalance: !include types/account_balance.raml
  User: !include types/user.raml

/accounts: 
  post:
    securedBy: []
    description: Create a new account
    body:
      application/json:
        type: object
        properties: 
          name: string
          description?: string
          exchangeCredentials: ExchangeCredentials[]
          accountUserPublicKey: 
            type: string
            description: Public key for the account's admin user
    responses:
      200:
        body: 
          type: AccountStatus


  /{accountName}:
    put:
      description: Update existing account details
      body:
        application/json:
          type: object
          properties:
            name?: string
            description?: string
            exchangeCredentials?: ExchangeCredentials[]
      responses:
        200:
          body: 
            type: AccountStatus

    /users:
      get:
        description: gets the list of all of the users in the account
        responses:
            200:
              body:
                type: array
                items:
                  type: object
                  properties:
                    name: string
                    description?: string
                
      post:
        description: Create a new user for an account
        body:
          application/json:
            type: User
        responses:
          200:
            body:
              type: object
              properties:
                name: string
                description?: string
              example:
                {
                  "name": "Bob",
                  "description": "Bob Rohan - Finances"
                }
      put:
        description: Update an exisitng user details
        body:
          application/json:
            type: User
        responses:
          200:
            body:
              type: object
              properties:
                name: string
                description?: string
              example:
                {
                  "name": "Bob",
                  "description": "Bob Rohan - Finances"
                }

    /balance:
      get:
        description: Gets the balance of the account from the exchanges
        queryParameters:
          detailed?:
            description: Sets whether the returned balance is aggregated or detailed per exchange
            type: boolean
        responses:
          200:
            body:
              type: object
              properties:
                accountBalance:
                  type: AccountBalance
              examples:
                - accountBalance:
                    {
                      "totalBalance":
                      {
                        "USD": 1600,
                        "BTC": 0.7
                      }
                    }
                - accountBalance:
                    {
                      "totalBalance": 
                      {
                        "USD": 1600,
                        "BTC": 0.7
                      },
                      "exchangesBalance":
                      {
                        "Bitstamp":
                        {
                          "USD": 1400,
                          "BTC": 0.3
                        },
                        "Kraken":
                        {
                          "USD": 200,
                          "BTC": 0.4
                        }
                      }
                    }                

/funding:    
  /deposits:
    post:
      description: Request for a new deposit of assets to Smart-Trader account.
      body:
        application/json:
          type: object
          properties: 
            assetType: string
      responses:
        200:
          body:
            type: object
            properties:
              walletAddress : string
            example:
              {
                "walletAddress": "bc1qdp9q0lae7vz9vn4drw4e48kqkk44sccp34008s"
              }

    get:       
      description: List all account deposit resquest history.
      queryParameters:
        limit?:
          description: Limits the number of deposit that will be returned.
          type: number
      responses:
        200:
          body:
            type: array
            items:
              type: object
              properties:
                time: datetime
                assetType: string
                walletAddress : string
                account: string
                userId: string
            example:
              [
                  {
                    "time": 2018-10-10 10:05:13.384,
                    "assetType": "BTC",
                    "walletAddress": "bc1qdp9q0lae7vz9vn4drw4e48kqkk44sccp34008s",
                    "account": "BTC.com",
                    "userId": "bob"
                  },
                  {
                    "time": 2018-07-11 23:42:21.958,
                    "assetType": "ETH",
                    "walletAddress": "0x301DF4cC1049982D8c289d9134Cd302678946Dd8"
                    "account": "BTC.com",
                    "userId": "alice"
                  }
              ]

  /withdraws:
    post:
      description: Request to withdraw annount of asset from Smart-Trader account.
      body:
        application/json:
          type: object
          properties: 
            amount: number
      responses:
        200:
          body:
            type: object
            properties:
              transactionID : string
            example:
                {
                  "transactionID": "FDSGDFHT15DS"
                }

    get:       
      description: Returns a specific withdraw transaction status.
      queryParameters:
        transactionID:
          description: withdraw transaction ID.
          type: string
      responses:
        200:
          body:
            type: object
            properties:
              requestTime: datetime
              amount: number
              status:
                enum: [Success, Failed, In-Progress]
            example:
                {
                  "requestTime": 2018-10-10 10:05:13.384,
                  "amount": 1500,
                  "status": "In-Progress"
                }
                

/trade:
  post:
    description: Send an order to be executed on Smart-Trader. When a floorPrice isn't sent the order is executed as a market order.
    body:
      application/json:
        type: Order
        example: 
          { 
            "actionType": "sell",
            "size": 1001,
            "assetPair": "BTC-USD",
            "price": 6500,
            "durationMin": 600
          }
    responses:
      200:
        body:
          application/json:
            type: object
            properties: 
              tradeOrderId: string
            example:
              {
                "tradeOrderId": "ABC2D"
              }
  get:
    queryParameters:
          transactionID:
            description: withdraw transaction ID.
            type: string
    responses:
      200:
        body:
          application/json:
            type: OrderStatus
            example:
              {
                "status": "Done",
                "executionSize": 1001,
                "tradeOrderId": "ABC2D"
              }

/reports:
  description: Smart-Trader reports APIs
  /sentOrders:
    post:
      description: Generat report on sent transactions data.
      body:
        application/json:
          properties:
            limit: 
              description: Limit the resposnse size (default is 1000).
              type: number
              required: true
            filter:
              description: Report object.
              required: true
              type: ReportFilter
      responses:
        200:
          body:
            application/json:
              type: SentOrder[]
              example:
                [
                  { 
                    "account": "BTC.com"
                    "exchange": "Bitfinex",
                    "actionType": "buy",
                    "size": 0.1,
                    "price": 6581.8,
                    "exchangeOrderId": "17869737638",
                    "status": "Finished",
                    "orderTime": 2018-10-10 10:05:13.384,
                    "timedOrder": false,
                    "assetPair": "BTC-USD",
                    "currencyFromAvailable": 3522.28410189,
                    "currencyToAvailable": 0.10772093,
                    "ask": 6501,
                    "bid": 6499,
                    "userId": "ABC",
                    "tradeOrderId": "850"
                  }
                ]    
    


